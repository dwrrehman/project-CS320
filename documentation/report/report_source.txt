Final Report Source Textfile


1 Introduction
The Calculation Utility is a web app that allows the user to perform basic arithmetic, define basic and complex units, and perform unit conversions. By storing the units in a database it allows users to view and edit the units they've defined.

1.1 Project Overview - < A brief description of the project.
TO DO: Write 1-2 paragraphs describing the project. >

The project has two main features. The first is a unit converter, which converts units of the same type (e.g. length or mass) from one 'unit system' to another. Users define base units by entering information about the unit, the unit type, and the unit system. Once the user has multiple units of the same type, they can define a conversion factor between the two units. For example, the user could define 'meter' as a length unit in the metric system, and 'foot' as a length unit in the imperial system. They can then define a conversion between the two, in this case 1 meter = 3.28084 feet. When the user enters '1m' and switches the system to imperial, the app will display '3.28084ft'. Users can also define complex units in terms of existing units. The definition is just a string that the program parses. For example, Newtons would be defined as 'kg*m*s^-2'. Assuming all required base units and conversions are defined in each system, the user can then convert Newtons to the Imperial equivalent.

The second feature is a calculator. The UI follows the format of a basic calculator, and allows all standard arithmetic operations. In its current stage, the UI also presents a variety of more complex functions, such as sine, cosine, and tangent, but these are not functional. The calculator is integrated with the unit converter, and can perform calculations with units. For example, entering '1m + 1ft' would produce '1.3048m'. This also works with complex units. The calculator also includes buttons for adding new units, systems, and conversions, and for displaying all defined units.

1.2 Definitions, Acronyms and Abbreviations - <Define all the terms necessary to properly interpret the report, including acronyms and abbreviations.
TO DO: Please provide a list of all abbreviations and acronyms used in this document sorted in alphabetical order.>

1.3 References and Acknowledgments - <List any other documents or Web addresses to which this document refers. These may include user interface style guides, contracts, standards, system requirements specifications, use case documents, or a vision and scope document. 
TO DO: Use the standard IEEE citation guide for this section.>



2 Design

2.1 System Modeling - < Update your UML diagrams in milestone 2, to reflect the real implementation of this software. 
TO DO: Provide an updated version of the UML diagrams, including use case diagrams, sequence (or state) diagrams, activities diagrams, and class diagrams. If you don’t have an updated version, just mention: “our implementation strictly follows the design document (milestone 2)”. >

2.2 Interface Design - <Provide several screenshots to illustrate your interface design. 
TO DO: For each subsystem, pick one or two representative screenshots and paste here.>



3 Implementation

3.1 Development Environment - <Describe the development environment you were using for the project.
TO DO: List the programming languages, IDEs, tools, etc.>

Initial mockups of the UI components were developed with pure HTML and CSS, and the unit conversion algorithms were written in Javascript. To develop this into a functional application we used Meteor, a web app framework. Meteor uses Javascript, and integrates with MongoDB and Blaze for database and rendering support. Development took place in JetBrain's IntelliJ IDEA IDE.

3.2 Task Distribution - <Describe how the implementation tasks are distributed among team members.    TO DO: For each team member, describe his/her main implementation tasks in this project.
If this is a one-person project, mention: “all the work presented here is done by *** (your name).”> 

We didn't outline and follow strict responsibilities during development, so many aspects of the project likely have contributions from all members. In general the work was divided as follows:

Jake Palmer: Created the Meteor project, and integrated the UI mockup with Meteor, Blaze, and FlowRouter. Created databases with schemas for storing units. Implemented functionality to add and edit units in the database.

Andrew Oakes:

Daniel Rehman:

3.3 Challenges - <This section is optional. Describe the challenges in the implementation, if there are any, and how you dealt with them.    	
TO DO: If you don’t have anything to fill in, just leave this section blank.> 


4 Testing

<This section is a summary of your testing report>

4.1 Testing Plan - <Describe your testing plan for the project. 
TODO: Give a list of items or functions you want to test, and also a schedule for performing the testing.>

4.2 Tests for Functional Requirements - <Describe your test results for the functional requirements.
TODO: Provide a list of use cases or functions you have tested, as well as the testing results (whether or not the system passed the tests).>

4.3 Tests for Non-functional Requirements - <Similar to the Section 4.2, but this section is for the non-functional requirements. >

4.4 Hardware and Software Requirements - <Describe the hardware and software requirements for performing the tests. > 



5 Analysis

<In this Section you need to analyze the effort that has been put on this project.
TODO: Describe how many hours (approximately) each team member spent on the project, for each milestone, which milestone takes the most effort and why. >



6 Conclusion

<Conclude the document with what you have learned through working on the project.>



Appendix A Group Log
< Describe how frequently the group members meet during the semester, and how effective the communication is. This is optional for one-person projects.>

We formed our group in September, and begun discussing ideas for the project. In early October we decided to create a customizable unit converter, and began discussing how the system would work and look. Through October and November we met up about once a week and worked on the unit conversion system. Meetings became less frequent in November, but after Thanksgiving break we refocused and worked together several times.

Group meetings were always productive, and we communicated well with one another.