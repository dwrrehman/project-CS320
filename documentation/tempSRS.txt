SRS temporary textfile.

Project Name: Calculation Utility.
Project Members: Daniel, Jake, and Andrew.
Date: 2018, Oct 6.


Introduction: ------------------------------------------------------------

This project is a Calculation Utility, which allows the user to calculate numbers using a calculator, graph user defined functions, convert existing units to other units, define new units, visualize the unit conversion using graphics, as well as list all current units defined. It is a web appllication written in HTML, CSS, and Javascript.

section 1.1: ------------------------------------------------------------

This document serves as a comprehensive overview of version 0.1 of our Calculation Utility project. The project is in its initial stages and ideas are still being formed, so the scope and details of functionality described here are tentative.

section 1.2: ------------------------------------------------------------

[assigned: andrew]

:Prompt:
<Provide a short description of the software being specified and its purpose, including relevant benefits, objectives, and goals. 
TO DO: 1-2 paragraphs describing the scope of the product. Make sure to describe the benefits associated with the product.>
:Prompt:



section 1.3: ------------------------------------------------------------

The Users of this document are the professor, and the web clients who use the Calculation Utility web application, as well as the developers of this application, which include the members of this project.

section 1.4: ------------------------------------------------------------

:Prompt:
[any document defintions or acronyms are using.]
:Prompt:


section 1.5: ------------------------------------------------------------

:Prompt:
[any document conventions are using.]
:Prompt:


section 1.6: ------------------------------------------------------------

:Prompt:
[Citations]
:Prompt:










section 2.1 ------------------------------------------------------------

The Calulation Utility is a new, standalone web application. It can be used by anyone with access to the internet, but would primarily be of use to engineers, mathematicians, and those in similar fields. The UI allows the user to select the desired units to convert to and from, to define a new unit, or to use the calculator. Results of a unit conversion or calculation are displayed to the user. A separate page displays a list of all available units and their descriptions.

[todo: insert image: IMG_3329]

section 2.2 ------------------------------------------------------------

The product, Calculation Utility, must be able to convert units, define additional units for converting, and list available units already defined. As it contains a calculator, this product must also be able to perform basic arithematic on numbers given by the user, as well as perform calulations using user defined functions, and make a tumb-nail graph these user defined functions in a list format, when the user views these functions.

It should also be able to store any values returned by either the converter or the calculator in a set of variables and constants, that can be loaded from at any time.

[todo: insert image: IMG_8563]


section 2.3 ------------------------------------------------------------

:Prompt:
Users and Characteristics
<Identify the various users that you anticipate will use this product. Users may be differentiated based on frequency of use, subset of product functions used, technical expertise, security or privilege levels, educational level, or experience. 
TO DO: 
1. Describe the pertinent characteristics of each user. Certain requirements may pertain only to certain users. 
3. Distinguish the most important users for this product from those who are less important to satisfy.>
:Prompt:

the users that we anticipate are possibly engineers, scientists, and applied mathmaticians, all of which might wish to have a calulating uility which can deal with units. all three of these user bases are important to satisfy, however giving accurate service to the engineers would be possibly the most important, as these users might be in charge of making structures in the real world based on this product.


section 2.4 ------------------------------------------------------------


:Prompt:
Operating Environment
<Describe the environment in which the software will operate, including the hardware platform, operating system and versions, and any other software components or applications with which it must peacefully coexist. In this part, make sure to include a simple diagram that shows the major components of the overall system, subsystem interconnections, and external interface
TO DO: As stated above, in at least one paragraph, describe the environment your system will have to operate in. Make sure to include the minimum platform requirements for your system. >
:Prompt:

the operating enviorment is a web browser on possibly any machine, and as such it needs to be efficent and responsive. 




section 2.5 ------------------------------------------------------------


:Prompt:Design and Implementation Constraints
<Describe any items or issues that will limit the options available to the developers. These might include: hardware limitations (timing requirements, memory requirements); interfaces to other applications; specific technologies, tools, and databases to be used; parallel operations; language requirements; communications protocols; security considerations; design conventions or programming standards (for example, if the customer’s organization will be responsible for maintaining the delivered software).
TO DO: In this section you need to consider all of the information you gathered so far, analyze it and correctly identify relevant constraints.>
:Prompt:

The primary constraints on this product are the required programming languages and development schedule. To meet the project requirements, the program must be created using HTML, CSS, and Javascript. Development must also follow a strict schedule, and be completed by the end of the Fall 2018 school semester. These constraints will limit the number of features that can be implemented.

In terms of functionality constraints, the product must be able to deal with numerical user input, and perform computations on that input which might have units. it must also be able to convert between units accurately.


section 2.6 ------------------------------------------------------------

:Prompt:
User Documentation
<List the user documentation components (such as user manuals, on-line help, and tutorials) that will be delivered along with the software. Identify any known user documentation delivery formats or standards. 
TO DO: You will not actually develop any user-manuals, but you need to describe what kind of manuals and what kind of help is needed for the software you will be developing. One paragraph should be sufficient for this section.>
:Prompt:

User documentation will exist solely on the website as part of the UI. The product is fairly simple, so simple directions placed directly in the website should be sufficient to guide the user.


section 2.7 ------------------------------------------------------------

:Prompt:
Assumptions and Dependencies
<Describe the environment in which the software will operate, including the hardware platform, operating system and versions, and any other software components or applications with which it must peacefully coexist. In this part, make sure to include a simple diagram that shows the major components of the overall system, subsystem interconnections, and external interface
TO DO: As stated above, in at least one paragraph, describe the environment your system will have to operate in. Make sure to include the minimum platform requirements for your system. >
:Prompt:

This product will use the Javascript Underscore Library.


section 3.1.1: ------------------------------------------------------------


:Prompt:
User Interfaces
<Describe the logical characteristics of each interface between the software product and the users. This may include sample screen images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and functions (e.g., Cancel) that will appear on every screen, error message display standards, and so on. Define the software components for which a user interface is needed.
TO DO: The least you can do for this section is to describe in words the different User Interfaces and the different screens that will be available to the user. Optional: You may also provide an initial Graphical User Interface design (does not have to be final).>
:Prompt:


The User Interface will have two main parts, each with multiple views. the major parts are the claulator and the unit converter. the calulator will have a typical calculator interface, as well a button which goes to a view which displays a list of the current user defined functions, and their thumbnails, and names. there is also a utility to list all the current users defined values, (variables, and cosntants).

[todo: include screen shot of current UI design for the U.C., by starting up and runnign the current source code].

In the unit converter, there are three main views: the main view which allows the user to convert between two units, a view to define a new unit based on existing units, as well as a a view to list all the existing units, and their definitions.




section 3.1.2: ------------------------------------------------------------

:Prompt:
Hardware Interfaces
<Describe the logical and physical characteristics of each interface between the software product and the hardware components of the system. This may include the supported device types, the nature of the data and control interactions between the software and the hardware. You are not required to specify what protocols you will be using to communicate with the hardware, but it will be usually included in this part as well.
TO DO: Please provide a short description of the different hardware interfaces. If you will be using some special libraries to communicate with your software mention them here. In case you have more than one hardware interface divide this section into subsections.>
:Prompt:

because this application is running in a web browser, it will interface with the hardware of the computer running the web browser. if a graphics libary is used, then this hardware will include the Users GPU, if it exists.







section 3.1.3: ------------------------------------------------------------

:Prompt:
Software Interfaces
<Describe the connections between this product and other specific software components (name and version), including databases, operating systems (Windows? Linux? Etc…), tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of communications. Identify data that will be shared across software components. If the data sharing mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.  
TO DO: The previous part illustrates some of the information you would usually include in this part of the SRS document. To make things simpler, you are only required to describe the specific interface with the operating system.>
:Prompt:

because the software uses the underscore library, we interface with underscore using its API. furthermore, we are interfacing with HTML CSS, and JS, because this application runs in a web browser. this is the extent of our external software interfacing, as most interfacing is internal to the application.



section 3.1.4: ------------------------------------------------------------

:Prompt:
Communications Interfaces
<Describe the requirements associated with any communications functions required by this product, including e-mail, web browser, network server communications protocols, electronic forms, and so on. Define any pertinent message formatting. Identify any communication standards that will be used, such as FTP or HTTP. Specify any communication security or encryption issues, data transfer rates, and synchronization mechanisms.
TO DO: Do not go into too much detail, but provide 1-2 paragraphs were you will outline the major communication standards. For example, if you decide to use encryption there is no need to specify the exact encryption standards, but rather, specify the fact that the data will be encrypted and name what standards you consider using. >
:Prompt:

because we are using a web browser, we are using the protocol "HTTP"/"HTTPS", at some point.


section 3.2: ------------------------------------------------------------

:Prompt:
Functional Requirements
< Functional requirements capture the intended behavior of the system. This behavior may be expressed as services, tasks or functions the system is required to perform. This section is the direct continuation of section 2.2 where you have specified the general functional requirements. Here, you should list in detail the different product functions with specific explanations regarding every function. 
TO DO: Break the functional requirements to several functional areas and divide this section into subsections accordingly. Provide a detailed list of all product operations related to these functional areas. 
:Prompt:


3.2.1 Convert Units:
The main UI provides a space to enter a value and its units, and a space to select the unit to convert to. When the 'Convert' button or Enter key is pressed, the program calculates and displays the result of the conversion.

3.2.2 Define New Units:
The main UI contains a button to 'Define New Unit'. This opens a new UI where the user can enter the name, symbol and description of the new unit, and a formula that defines the unit.

3.2.3 List Available Units:
The main UI contains a button to 'List Available Units'. This links to a separate page that lists all default and user defined units. Each entry contains the unit name, symbol, and description.

3.2.4 Calculator:
The main UI contains a calculator that can perform basic arithmetic.

3.2.5 Variables and Functions:
The main UI contains a way to define new numerical variables (or constants) and user defined functions, and list all current variables (or constants) and functions. 

section 3.3.1: ------------------------------------------------------------

:Prompt:
Behaviour Requirements:
Use Case View:
<A use case defines a goal-oriented set of interactions between external actors and the system under consideration. 
TO DO: Provide a use case diagram which shows the entire system and all possible actors. Do not include detailed use case descriptions (these will be needed when you will be working on the Test Plan), but make sure to include a short description of what every use-case is, who are the actors in your diagram.>
:Prompt:


section 4.1: ------------------------------------------------------------

:Prompt:
Performance Requirements
<If there are performance requirements for the product under various circumstances, state them here and explain their rationale, to help the developers understand the intent and make suitable design choices. Specify the timing relationships for real time systems. Make such requirements as specific as possible. You may need to state performance requirements for individual functional requirements or features. 
TODO: Provide relevant performance requirements based on the information you collected from the client. For example you can say “1. Any transaction will not take more than 10 seconds, etc…>
:Prompt:

The software needs to be responsive, as the users, (whether engineers or mathmeticians) probably do not want to wait more than a couple seconds (eg. 3 seconds.) for a single simple calculation/conversion. thus, the user interface, and internal logic needs to be written efficently.

section 4.2: ------------------------------------------------------------

:Prompt:
Safety and Security Requirements
<Specify those requirements that are concerned with possible loss, damage, or harm that could result from the use of the product. Define any safeguards or actions that must be taken, as well as actions that must be prevented. Refer to any external policies or regulations that state safety issues that affect the product’s design or use. Define any safety certifications that must be satisfied. Specify any requirements regarding security or privacy issues surrounding use of the product or protection of the data used or created by the product. Define any user identity authentication requirements.
TODO: 
•	Provide relevant safety requirements based on your interview with the client or, on your expectation for the product.
Describe briefly what level of security is expected from this product by your client and provide a bulleted (or numbered) list of the major security requirements.>
:Prompt:

There is no direct safety requirements of the system, as it is running in a web browser, however since engineers might be users of this system, giving back an accurate answer is important, as giving a wrong answer might possibly lead to incorrect systems being built by the users.

Safety Requirements:
1. give correct/accurate answers to calculations.
2. give correct/accurate answers to unit conversions.


section 4.3: ------------------------------------------------------------

:Prompt:
1.1	Software Quality Attributes
<Specify any additional quality characteristics for the product that will be important to either the customers or the developers. Some to consider are: adaptability, availability, correctness, flexibility, interoperability, maintainability, portability, reliability, reusability, robustness, testability, and usability. Write these to be specific, quantitative, and verifiable when possible. At the least, clarify the relative preferences for various attributes, such as ease of use over ease of learning. 

TODO: Use subsections (e.g., 4.3.1 Reliability, 4.3.2 Portability, etc…) provide requirements related to the different software quality attributes. Base the information you include in these subsections on the material you have learned in the class. Make sure, that you do not just write “This software shall be maintainable…” Indicate how you plan to achieve it, etc.>
:Prompt:






section 5: ------------------------------------------------------------

:Prompt:
[OPTIONAL]
:Prompt: