SRS temporary textfile.

Project Name: Calculation Utility.
Project Members: Daniel, Jake, and Andrew.
Date: 2018, Oct 6.


Introduction: ------------------------------------------------------------

This project is a Calculation Utility, which allows the user to calculate numbers using a calculator, graph user defined functions, convert existing units to other units, define new units, visualize the unit conversion using graphics, as well as list all current units defined. It is a web appllication written in HTML, CSS, and Javascript.

section 1.1: ------------------------------------------------------------

This document serves as a comprehensive overview of version 0.1 of our Calculation Utility project. The project is in its initial stages and ideas are still being formed, so the scope and details of functionality described here are tentative.

section 1.2: ------------------------------------------------------------

[assigned: andrew]

:Prompt:
<Provide a short description of the software being specified and its purpose, including relevant benefits, objectives, and goals. 
TO DO: 1-2 paragraphs describing the scope of the product. Make sure to describe the benefits associated with the product.>
:Prompt:



section 1.3: ------------------------------------------------------------

The Users of this document are the professor, and the web clients who use the Calculation Utility web application, as well as the developers of this application, which include the members of this project.

section 1.4: ------------------------------------------------------------

:Prompt:
:Prompt:


section 1.5: ------------------------------------------------------------

:Prompt:
:Prompt:


section 1.6: ------------------------------------------------------------

:Prompt:
:Prompt:




section 2.1 ------------------------------------------------------------

The Calulation Utility is a new, standalone web application. It can be used by anyone with access to the internet, but would primarily be of use to engineers, mathematicians, and those in similar fields. The UI allows the user to select the desired units to convert to and from, to define a new unit, or to use the calculator. Results of a unit conversion or calculation are displayed to the user. A separate page displays a list of all available units and their descriptions.

[todo: insert image: IMG_3329]

section 2.2 ------------------------------------------------------------

The product, Calculation Utility, must be able to convert units, define additional units for converting, and list available units already defined. As it contains a calculator, this product must also be able to perform basic arithematic on numbers given by the user, as well as perform calulations using user defined functions, and make a tumb-nail graph these user defined functions in a list format, when the user views these functions.

It should also be able to store any values returned by either the converter or the calculator in a set of variables and constants, that can be loaded from at any time.

[todo: insert image: IMG_8563]


section 2.3 ------------------------------------------------------------

:Prompt:
Users and Characteristics
<Identify the various users that you anticipate will use this product. Users may be differentiated based on frequency of use, subset of product functions used, technical expertise, security or privilege levels, educational level, or experience. 
TO DO: 
1. Describe the pertinent characteristics of each user. Certain requirements may pertain only to certain users. 
3. Distinguish the most important users for this product from those who are less important to satisfy.>
:Prompt:



section 2.4 ------------------------------------------------------------


:Prompt:
Operating Environment
<Describe the environment in which the software will operate, including the hardware platform, operating system and versions, and any other software components or applications with which it must peacefully coexist. In this part, make sure to include a simple diagram that shows the major components of the overall system, subsystem interconnections, and external interface
TO DO: As stated above, in at least one paragraph, describe the environment your system will have to operate in. Make sure to include the minimum platform requirements for your system. >
:Prompt:






section 2.5 ------------------------------------------------------------

:Prompt:Design and Implementation Constraints
<Describe any items or issues that will limit the options available to the developers. These might include: hardware limitations (timing requirements, memory requirements); interfaces to other applications; specific technologies, tools, and databases to be used; parallel operations; language requirements; communications protocols; security considerations; design conventions or programming standards (for example, if the customer’s organization will be responsible for maintaining the delivered software).
TO DO: In this section you need to consider all of the information you gathered so far, analyze it and correctly identify relevant constraints.>
:Prompt:


section 2.6 ------------------------------------------------------------


:Prompt:
User Documentation
<List the user documentation components (such as user manuals, on-line help, and tutorials) that will be delivered along with the software. Identify any known user documentation delivery formats or standards. 
TO DO: You will not actually develop any user-manuals, but you need to describe what kind of manuals and what kind of help is needed for the software you will be developing. One paragraph should be sufficient for this section.>
:Prompt:


section 2.7 ------------------------------------------------------------

:Prompt:
<Describe the environment in which the software will operate, including the hardware platform, operating system and versions, and any other software components or applications with which it must peacefully coexist. In this part, make sure to include a simple diagram that shows the major components of the overall system, subsystem interconnections, and external interface
TO DO: As stated above, in at least one paragraph, describe the environment your system will have to operate in. Make sure to include the minimum platform requirements for your system. >
:Prompt:


section 3.1.1: ------------------------------------------------------------


:Prompt:
User Interfaces
<Describe the logical characteristics of each interface between the software product and the users. This may include sample screen images, any GUI standards or product family style guides that are to be followed, screen layout constraints, standard buttons and functions (e.g., Cancel) that will appear on every screen, error message display standards, and so on. Define the software components for which a user interface is needed.
TO DO: The least you can do for this section is to describe in words the different User Interfaces and the different screens that will be available to the user. Optional: You may also provide an initial Graphical User Interface design (does not have to be final).>
:Prompt:



section 3.1.2: ------------------------------------------------------------

:Prompt:
Hardware Interfaces
<Describe the logical and physical characteristics of each interface between the software product and the hardware components of the system. This may include the supported device types, the nature of the data and control interactions between the software and the hardware. You are not required to specify what protocols you will be using to communicate with the hardware, but it will be usually included in this part as well.
TO DO: Please provide a short description of the different hardware interfaces. If you will be using some special libraries to communicate with your software mention them here. In case you have more than one hardware interface divide this section into subsections.>
:Prompt:


section 3.1.3: ------------------------------------------------------------

:Prompt:
Software Interfaces
<Describe the connections between this product and other specific software components (name and version), including databases, operating systems (Windows? Linux? Etc…), tools, libraries, and integrated commercial components. Identify the data items or messages coming into the system and going out and describe the purpose of each. Describe the services needed and the nature of communications. Identify data that will be shared across software components. If the data sharing mechanism must be implemented in a specific way (for example, use of a global data area in a multitasking operating system), specify this as an implementation constraint.  
TO DO: The previous part illustrates some of the information you would usually include in this part of the SRS document. To make things simpler, you are only required to describe the specific interface with the operating system.>
:Prompt:

section 3.1.4: ------------------------------------------------------------


